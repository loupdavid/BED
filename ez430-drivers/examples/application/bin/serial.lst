
bin/serial.elf:     file format elf32-msp430

SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000882a l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
00000212 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00008118 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 clock.c
00000200 l     O .bss	00000002 mclk_freq_mhz
00008244 l     F .text	000000c0 set_mcu_speed
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 uart.c
00000202 l     O .bss	00000002 uart_cb
00000000 l    df *ABS*	00000000 watchdog.c
00000204 l     O .bss	00000002 watchdog_backup
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 puts.c
000086b6 g     F .text	00000032 putchar
00000057 g       *ABS*	00000000 __BCSCTL1
000083ae g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_16MHz
00000174 g       *ABS*	00000000 __TACCR1
00000000 g       *ABS*	00000000 __data_size
00008118  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00008386 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_3MHz
00000024 g       *ABS*	00000000 __P1IES
0000004b g       *ABS*	00000000 __ADC10AE1
00000069 g       *ABS*	00000000 __UCB0CTL1
00008118  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000060 g       *ABS*	00000000 __UCA0CTL0
00008328 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_4MHz
0000012e g       *ABS*	00000000 __TAIV
000086ac g     F .text	0000000a uart_stop
00008202 g     F .text	00000034 execcmd
00000000 g       .vectors	00000000 _efartext
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
0000889a g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
00008180 g     F .text	00000066 serial_ring_get
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
0000001d g       *ABS*	00000000 __P4OUT
00000012 g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
000083fe g     F .text	00000010 loop_4_cycles
00008000  w      .text	00000000 __watchdog_support
00008112  w      .text	00000000 __stop_progExec__
0000811c g     F .text	00000016 serial_ring_init
0000002d g       *ABS*	00000000 __P2IE
000087fc g     F .text	0000002c puts
00008706 g     F .text	00000014 uart_eint
00000192 g       *ABS*	00000000 __TBCCR0
00008118  w      .text	00000000 __isr_11
00000186 g       *ABS*	00000000 __TBCCTL2
00008372 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_6MHz
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00000049 g       *ABS*	00000000 __ADC10DTC1
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
0000834c g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_1MHz
000083d6 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_4MHz
00000206 g     O .bss	00000001 serial_rx_size
00000182 g       *ABS*	00000000 __TBCCTL0
0000006d g       *ABS*	00000000 __UCB0STAT
00008118  w      .text	00000000 __isr_5
00000207 g     O .bss	00000001 serial_rx_rptr
00000063 g       *ABS*	00000000 __UCA0BR1
0000889a g       *ABS*	00000000 __data_load_start
000085d4 g     F .text	00000016 leds_on
00008118 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
0000856c g     F .text	00000014 led_green_switch
000001bc g       *ABS*	00000000 __ADC10SA
00000166 g       *ABS*	00000000 __TACCTL2
00000065 g       *ABS*	00000000 __UCA0STAT
00008542 g     F .text	00000016 led_green_off
00008118  w      .text	00000000 __isr_2
00000160 g       *ABS*	00000000 __TACTL
0000012c g       *ABS*	00000000 __FCTL3
00008118  w      .text	00000000 __isr_10
00008236 g     F .text	0000000e get_mclk_freq_mhz
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
0000833a g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_2MHz
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
000000c3 g       *ABS*	00000000 __OA1CTL1
00000023 g       *ABS*	00000000 __P1IFG
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
00008596 g     F .text	00000014 led_red_on
00000172 g       *ABS*	00000000 __TACCR0
000085be g     F .text	00000016 leds_off
00000056 g       *ABS*	00000000 __DCOCTL
00000003 g       *ABS*	00000000 __IFG2
00000212 g     O .noinit	00000002 __wdt_clear_value
000086e8 g     F .text	0000001e uart_getchar
0000001b g       *ABS*	00000000 __P3SEL
00008758 g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
00000028 g       *ABS*	00000000 __P2IN
00000118 g       *ABS*	00000000 __UCB0I2COA
00000184 g       *ABS*	00000000 __TBCCTL1
000001b4 g       *ABS*	00000000 __ADC10MEM
00008580 g     F .text	00000016 led_red_off
00008118  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00000064 g       *ABS*	00000000 __UCA0MCTL
0000861c g     F .text	00000090 uart_init
00008028  w      .text	00000000 __do_clear_bss
0000871a g     F .text	00000016 uart_dint
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
000083c2 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_8MHz
000087ac g     F .text	0000001c watchdog_stop
00008304 g     F .text	00000012 set_mcu_speed_dco_mclk_1MHz_smclk_1MHz
0000839a g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz
00000027 g       *ABS*	00000000 __P1REN
00008730 g     F .text	00000028 uart_register_cb
000000c0 g       *ABS*	00000000 __OA0CTL0
000083ea g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_2MHz
00008828  w      .text	00000000 _unexpected_
00000208 g     O .bss	00000008 serial_rx_buffer
00008118  w      .text	00000000 __isr_8
00008118  w      .text	00000000 __isr_3
000085aa g     F .text	00000014 led_red_switch
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
00008000  w      .text	00000000 _reset_vector__
00008118 g       .text	00000000 __ctors_start
00008118  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
00000018 g       *ABS*	00000000 __P3IN
00008010  w      .text	00000000 __do_copy_data
00000200 g       .bss	00000000 __bss_start
0000803e g     F .text	000000d4 main
00000176 g       *ABS*	00000000 __TACCR2
000084b4 g     F .text	0000008e delay_ms
000000c2 g       *ABS*	00000000 __OA1CTL0
00008118  w      .text	00000000 __isr_13
0000840e g     F .text	000000a6 delay_usec
00000170 g       *ABS*	00000000 __TAR
0000001e g       *ABS*	00000000 __P4DIR
00008758 g     F .text	00000054 usart0irq
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
000087de g     F .text	0000001e strcmp
0000002a g       *ABS*	00000000 __P2DIR
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
00008118  w      .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000800c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
00000019 g       *ABS*	00000000 __P3OUT
000000c1 g       *ABS*	00000000 __OA0CTL1
0000835e g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_12MHz
00008132 g     F .text	0000004e serial_ring_put
00008118 g       .text	00000000 __dtors_start
00008118  w      .text	00000000 __isr_6
00008118 g       .text	00000000 __ctors_end
00000062 g       *ABS*	00000000 __UCA0BR0
00000600 g       *ABS*	00000000 __stack
00008316 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_8MHz
00008118  w      .text	00000000 __isr_1
00000200 g       .rodata	00000000 _edata
00000214 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
00000048 g       *ABS*	00000000 __ADC10DTC0
0000011e g       *ABS*	00000000 __TBIV
000001b2 g       *ABS*	00000000 __ADC10CTL1
00000210 g     O .bss	00000001 serial_rx_wptr
00008558 g     F .text	00000014 led_green_on
000087c8 g     F .text	00000016 watchdog_restore
00000058 g       *ABS*	00000000 __BCSCTL2
00008112  w      .text	00000000 _endless_loop__
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
00000164 g       *ABS*	00000000 __TACCTL1
0000006f g       *ABS*	00000000 __UCB0TXBUF
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
00008010  w      .text	00000000 __low_level_init
00000011 g       *ABS*	00000000 __P4REN
00000200 g       .rodata	00000000 __data_start
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
000081e6 g     F .text	0000001c serial_cb
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
000085ea g     F .text	00000032 leds_init



Disassembly of section .text:

00008000 <__watchdog_support>:
    8000:	55 42 20 01 	mov.b	&0x0120,r5	
    8004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    8008:	82 45 12 02 	mov	r5,	&0x0212	

0000800c <__init_stack>:
    800c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

00008010 <__do_copy_data>:
    8010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    8014:	0f 93       	tst	r15		
    8016:	08 24       	jz	$+18     	;abs 0x8028
    8018:	92 42 12 02 	mov	&0x0212,&0x0120	
    801c:	20 01 
    801e:	2f 83       	decd	r15		
    8020:	9f 4f 9a 88 	mov	-30566(r15),512(r15);0x889a(r15), 0x0200(r15)
    8024:	00 02 
    8026:	f8 23       	jnz	$-14     	;abs 0x8018

00008028 <__do_clear_bss>:
    8028:	3f 40 12 00 	mov	#18,	r15	;#0x0012
    802c:	0f 93       	tst	r15		
    802e:	07 24       	jz	$+16     	;abs 0x803e
    8030:	92 42 12 02 	mov	&0x0212,&0x0120	
    8034:	20 01 
    8036:	1f 83       	dec	r15		
    8038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    803c:	f9 23       	jnz	$-12     	;abs 0x8030

0000803e <main>:
    printf("\nCommande inconnue\n");
  }
}

int main(void)
{
    803e:	04 41       	mov	r1,	r4	
    8040:	24 53       	incd	r4		
    8042:	31 50 da ff 	add	#-38,	r1	;#0xffda
  uint8_t data;
  char cmd[CMD_SIZE];
  int i=0;
    8046:	84 43 d8 ff 	mov	#0,	-40(r4)	;r3 As==00, 0xffd8(r4)
  int j;
  watchdog_stop();
    804a:	b0 12 ac 87 	call	#0x87ac	

  set_mcu_speed_dco_mclk_16MHz_smclk_8MHz();
    804e:	b0 12 c2 83 	call	#0x83c2	

  leds_init();
    8052:	b0 12 ea 85 	call	#0x85ea	

  led_red_on();
    8056:	b0 12 96 85 	call	#0x8596	

  uart_init(UART_9600_SMCLK_8MHZ);
    805a:	3f 42       	mov	#8,	r15	;r2 As==11
    805c:	b0 12 1c 86 	call	#0x861c	
  serial_ring_init();
    8060:	b0 12 1c 81 	call	#0x811c	
  uart_register_cb( serial_cb);
    8064:	3f 40 e6 81 	mov	#-32282,r15	;#0x81e6
    8068:	b0 12 30 87 	call	#0x8730	

  printf("serial test application: echo\n");
    806c:	3f 40 4f 88 	mov	#-30641,r15	;#0x884f
    8070:	b0 12 fc 87 	call	#0x87fc	
  led_green_on();
    8074:	b0 12 58 85 	call	#0x8558	
  eint();
    8078:	32 d2       	eint			

  for(;;)
  {
    LPM(1);
    807a:	32 d0 50 00 	bis	#80,	r2	;#0x0050
    if (serial_ring_get(&data))
    807e:	0f 44       	mov	r4,	r15	
    8080:	3f 50 dc ff 	add	#-36,	r15	;#0xffdc
    8084:	b0 12 80 81 	call	#0x8180	
    8088:	0f 93       	tst	r15		
    808a:	3c 24       	jz	$+122    	;abs 0x8104
    {
      if(data != '\r' && i<CMD_SIZE-1){
    808c:	5f 44 dc ff 	mov.b	-36(r4),r15	;0xffdc(r4)
    8090:	7f 90 0d 00 	cmp.b	#13,	r15	;#0x000d
    8094:	16 24       	jz	$+46     	;abs 0x80c2
    8096:	b4 90 1f 00 	cmp	#31,	-40(r4)	;#0x001f, 0xffd8(r4)
    809a:	d8 ff 
    809c:	12 34       	jge	$+38     	;abs 0x80c2
        putchar(data);
    809e:	5f 44 dc ff 	mov.b	-36(r4),r15	;0xffdc(r4)
    80a2:	4f 4f       	mov.b	r15,	r15	
    80a4:	b0 12 b6 86 	call	#0x86b6	
        cmd[i]=data;
    80a8:	5f 44 dc ff 	mov.b	-36(r4),r15	;0xffdc(r4)
    80ac:	4e 4f       	mov.b	r15,	r14	
    80ae:	0f 44       	mov	r4,	r15	
    80b0:	3f 50 dd ff 	add	#-35,	r15	;#0xffdd
    80b4:	1f 54 d8 ff 	add	-40(r4),r15	;0xffd8(r4)
    80b8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
        i++;
    80bc:	94 53 d8 ff 	inc	-40(r4)	;0xffd8(r4)
    80c0:	1e 3c       	jmp	$+62     	;abs 0x80fe
      }
      else{
        cmd[i]='\0';
    80c2:	0f 44       	mov	r4,	r15	
    80c4:	3f 50 dd ff 	add	#-35,	r15	;#0xffdd
    80c8:	1f 54 d8 ff 	add	-40(r4),r15	;0xffd8(r4)
    80cc:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
        execcmd(&cmd);
    80d0:	0f 44       	mov	r4,	r15	
    80d2:	3f 50 dd ff 	add	#-35,	r15	;#0xffdd
    80d6:	b0 12 02 82 	call	#0x8202	
        // Reset cmd
        for(j=0;j<CMD_SIZE;j++){
    80da:	84 43 da ff 	mov	#0,	-38(r4)	;r3 As==00, 0xffda(r4)
    80de:	09 3c       	jmp	$+20     	;abs 0x80f2
          cmd[j]=NULL;
    80e0:	0f 44       	mov	r4,	r15	
    80e2:	3f 50 dd ff 	add	#-35,	r15	;#0xffdd
    80e6:	1f 54 da ff 	add	-38(r4),r15	;0xffda(r4)
    80ea:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
      }
      else{
        cmd[i]='\0';
        execcmd(&cmd);
        // Reset cmd
        for(j=0;j<CMD_SIZE;j++){
    80ee:	94 53 da ff 	inc	-38(r4)	;0xffda(r4)
    80f2:	b4 90 20 00 	cmp	#32,	-38(r4)	;#0x0020, 0xffda(r4)
    80f6:	da ff 
    80f8:	f3 3b       	jl	$-24     	;abs 0x80e0
          cmd[j]=NULL;
        }
        i=0;
    80fa:	84 43 d8 ff 	mov	#0,	-40(r4)	;r3 As==00, 0xffd8(r4)
      }
      led_green_switch();
    80fe:	b0 12 6c 85 	call	#0x856c	
    else
    {
      printf("\n\n serial_ring_get() returns 0 : empty ring\n\n");
      led_red_switch();
    }
  }
    8102:	bb 3f       	jmp	$-136    	;abs 0x807a
      }
      led_green_switch();
    }
    else
    {
      printf("\n\n serial_ring_get() returns 0 : empty ring\n\n");
    8104:	3f 40 6d 88 	mov	#-30611,r15	;#0x886d
    8108:	b0 12 fc 87 	call	#0x87fc	
      led_red_switch();
    810c:	b0 12 aa 85 	call	#0x85aa	
    }
  }
    8110:	b4 3f       	jmp	$-150    	;abs 0x807a

00008112 <__stop_progExec__>:
    8112:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    8116:	fd 3f       	jmp	$-4      	;abs 0x8112

00008118 <__ctors_end>:
    8118:	30 40 28 88 	br	#0x8828	

0000811c <serial_ring_init>:
volatile uint8_t serial_rx_size;

/* ************************************************** */

void serial_ring_init()
{
    811c:	04 12       	push	r4		
    811e:	04 41       	mov	r1,	r4	
    8120:	24 53       	incd	r4		
  serial_rx_rptr = 0;
    8122:	c2 43 07 02 	mov.b	#0,	&0x0207	;r3 As==00
  serial_rx_wptr = 0;
    8126:	c2 43 10 02 	mov.b	#0,	&0x0210	;r3 As==00
  serial_rx_size = 0;
    812a:	c2 43 06 02 	mov.b	#0,	&0x0206	;r3 As==00
}
    812e:	34 41       	pop	r4		
    8130:	30 41       	ret			

00008132 <serial_ring_put>:

void serial_ring_put(uint8_t data)
{
    8132:	04 12       	push	r4		
    8134:	04 41       	mov	r1,	r4	
    8136:	24 53       	incd	r4		
    8138:	21 83       	decd	r1		
    813a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
  serial_rx_buffer[serial_rx_wptr] = data;
    813e:	5f 42 10 02 	mov.b	&0x0210,r15	
    8142:	4f 4f       	mov.b	r15,	r15	
    8144:	df 44 fc ff 	mov.b	-4(r4),	520(r15);0xfffc(r4), 0x0208(r15)
    8148:	08 02 
  serial_rx_wptr = (serial_rx_wptr + 1) % SERIAL_RX_FIFO_SIZE;
    814a:	5f 42 10 02 	mov.b	&0x0210,r15	
    814e:	4f 4f       	mov.b	r15,	r15	
    8150:	1f 53       	inc	r15		
    8152:	3f f0 07 80 	and	#-32761,r15	;#0x8007
    8156:	0f 93       	tst	r15		
    8158:	04 34       	jge	$+10     	;abs 0x8162
    815a:	3f 53       	add	#-1,	r15	;r3 As==11
    815c:	3f d0 f8 ff 	bis	#-8,	r15	;#0xfff8
    8160:	1f 53       	inc	r15		
    8162:	4f 4f       	mov.b	r15,	r15	
    8164:	c2 4f 10 02 	mov.b	r15,	&0x0210	
  if (serial_rx_size < SERIAL_RX_FIFO_SIZE)
    8168:	5f 42 06 02 	mov.b	&0x0206,r15	
    816c:	7f 92       	cmp.b	#8,	r15	;r2 As==11
    816e:	05 2c       	jc	$+12     	;abs 0x817a
  {
    serial_rx_size ++;
    8170:	5f 42 06 02 	mov.b	&0x0206,r15	
    8174:	5f 53       	inc.b	r15		
    8176:	c2 4f 06 02 	mov.b	r15,	&0x0206	
    /* 
     * if (serial_rx_size == SERIAL_RX_FIFO_SIZE) 
     * we get a rx_overflow 
     */
  }
}
    817a:	21 53       	incd	r1		
    817c:	34 41       	pop	r4		
    817e:	30 41       	ret			

00008180 <serial_ring_get>:

int serial_ring_get(uint8_t *data)
{
    8180:	04 12       	push	r4		
    8182:	04 41       	mov	r1,	r4	
    8184:	24 53       	incd	r4		
    8186:	21 82       	sub	#4,	r1	;r2 As==10
    8188:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  int ret = 0;
    818c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
  dint();
    8190:	32 c2       	dint			
    8192:	03 43       	nop			
  if (serial_rx_size > 0)
    8194:	5f 42 06 02 	mov.b	&0x0206,r15	
    8198:	4f 93       	tst.b	r15		
    819a:	1f 24       	jz	$+64     	;abs 0x81da
  {
    *data = serial_rx_buffer[serial_rx_rptr];
    819c:	5f 42 07 02 	mov.b	&0x0207,r15	
    81a0:	4f 4f       	mov.b	r15,	r15	
    81a2:	5e 4f 08 02 	mov.b	520(r15),r14	;0x0208(r15)
    81a6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    81aa:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    serial_rx_rptr = (serial_rx_rptr + 1) % SERIAL_RX_FIFO_SIZE;
    81ae:	5f 42 07 02 	mov.b	&0x0207,r15	
    81b2:	4f 4f       	mov.b	r15,	r15	
    81b4:	1f 53       	inc	r15		
    81b6:	3f f0 07 80 	and	#-32761,r15	;#0x8007
    81ba:	0f 93       	tst	r15		
    81bc:	04 34       	jge	$+10     	;abs 0x81c6
    81be:	3f 53       	add	#-1,	r15	;r3 As==11
    81c0:	3f d0 f8 ff 	bis	#-8,	r15	;#0xfff8
    81c4:	1f 53       	inc	r15		
    81c6:	4f 4f       	mov.b	r15,	r15	
    81c8:	c2 4f 07 02 	mov.b	r15,	&0x0207	
    serial_rx_size --;
    81cc:	5f 42 06 02 	mov.b	&0x0206,r15	
    81d0:	7f 53       	add.b	#-1,	r15	;r3 As==11
    81d2:	c2 4f 06 02 	mov.b	r15,	&0x0206	
    ret = 1;
    81d6:	94 43 fa ff 	mov	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
  }
  eint();
    81da:	32 d2       	eint			
  return ret;
    81dc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
}
    81e0:	21 52       	add	#4,	r1	;r2 As==10
    81e2:	34 41       	pop	r4		
    81e4:	30 41       	ret			

000081e6 <serial_cb>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

int serial_cb(unsigned char data)
{
    81e6:	04 12       	push	r4		
    81e8:	04 41       	mov	r1,	r4	
    81ea:	24 53       	incd	r4		
    81ec:	21 83       	decd	r1		
    81ee:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
  serial_ring_put(data);
    81f2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    81f6:	b0 12 32 81 	call	#0x8132	
  return 1; /* will wakeup from LPMx */
    81fa:	1f 43       	mov	#1,	r15	;r3 As==01
}
    81fc:	21 53       	incd	r1		
    81fe:	34 41       	pop	r4		
    8200:	30 41       	ret			

00008202 <execcmd>:

void execcmd(char cmd[]){
    8202:	04 12       	push	r4		
    8204:	04 41       	mov	r1,	r4	
    8206:	24 53       	incd	r4		
    8208:	21 83       	decd	r1		
    820a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
  
  if(strcmp(cmd, "test") == 0){
    820e:	3e 40 2a 88 	mov	#-30678,r14	;#0x882a
    8212:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8216:	b0 12 de 87 	call	#0x87de	
    821a:	0f 93       	tst	r15		
    821c:	05 20       	jnz	$+12     	;abs 0x8228
    printf("\nhello world\n");
    821e:	3f 40 2f 88 	mov	#-30673,r15	;#0x882f
    8222:	b0 12 fc 87 	call	#0x87fc	
    8226:	04 3c       	jmp	$+10     	;abs 0x8230
  }
  else{
    printf("\nCommande inconnue\n");
    8228:	3f 40 3c 88 	mov	#-30660,r15	;#0x883c
    822c:	b0 12 fc 87 	call	#0x87fc	
  }
}
    8230:	21 53       	incd	r1		
    8232:	34 41       	pop	r4		
    8234:	30 41       	ret			

00008236 <get_mclk_freq_mhz>:
    8236:	04 12       	push	r4		
    8238:	04 41       	mov	r1,	r4	
    823a:	24 53       	incd	r4		
    823c:	1f 42 00 02 	mov	&0x0200,r15	
    8240:	34 41       	pop	r4		
    8242:	30 41       	ret			

00008244 <set_mcu_speed>:
    8244:	04 12       	push	r4		
    8246:	04 41       	mov	r1,	r4	
    8248:	24 53       	incd	r4		
    824a:	21 83       	decd	r1		
    824c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8250:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    8254:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8258:	3f 92       	cmp	#8,	r15	;r2 As==11
    825a:	16 24       	jz	$+46     	;abs 0x8288
    825c:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    8260:	03 34       	jge	$+8      	;abs 0x8268
    8262:	1f 93       	cmp	#1,	r15	;r3 As==01
    8264:	08 24       	jz	$+18     	;abs 0x8276
    8266:	2b 3c       	jmp	$+88     	;abs 0x82be
    8268:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    826c:	16 24       	jz	$+46     	;abs 0x829a
    826e:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    8272:	1c 24       	jz	$+58     	;abs 0x82ac
    8274:	24 3c       	jmp	$+74     	;abs 0x82be
    8276:	5f 42 ff 10 	mov.b	&0x10ff,r15	
    827a:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    827e:	5f 42 fe 10 	mov.b	&0x10fe,r15	
    8282:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    8286:	1b 3c       	jmp	$+56     	;abs 0x82be
    8288:	5f 42 fd 10 	mov.b	&0x10fd,r15	
    828c:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    8290:	5f 42 fc 10 	mov.b	&0x10fc,r15	
    8294:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    8298:	12 3c       	jmp	$+38     	;abs 0x82be
    829a:	5f 42 fb 10 	mov.b	&0x10fb,r15	
    829e:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    82a2:	5f 42 fa 10 	mov.b	&0x10fa,r15	
    82a6:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    82aa:	09 3c       	jmp	$+20     	;abs 0x82be
    82ac:	5f 42 f9 10 	mov.b	&0x10f9,r15	
    82b0:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    82b4:	5f 42 f8 10 	mov.b	&0x10f8,r15	
    82b8:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    82bc:	03 43       	nop			
    82be:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    82c2:	2f 93       	cmp	#2,	r15	;r3 As==10
    82c4:	0e 24       	jz	$+30     	;abs 0x82e2
    82c6:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    82ca:	03 34       	jge	$+8      	;abs 0x82d2
    82cc:	1f 93       	cmp	#1,	r15	;r3 As==01
    82ce:	06 24       	jz	$+14     	;abs 0x82dc
    82d0:	12 3c       	jmp	$+38     	;abs 0x82f6
    82d2:	2f 92       	cmp	#4,	r15	;r2 As==10
    82d4:	09 24       	jz	$+20     	;abs 0x82e8
    82d6:	3f 92       	cmp	#8,	r15	;r2 As==11
    82d8:	0a 24       	jz	$+22     	;abs 0x82ee
    82da:	0d 3c       	jmp	$+28     	;abs 0x82f6
    82dc:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
    82e0:	0a 3c       	jmp	$+22     	;abs 0x82f6
    82e2:	e2 43 58 00 	mov.b	#2,	&0x0058	;r3 As==10
    82e6:	07 3c       	jmp	$+16     	;abs 0x82f6
    82e8:	e2 42 58 00 	mov.b	#4,	&0x0058	;r2 As==10
    82ec:	04 3c       	jmp	$+10     	;abs 0x82f6
    82ee:	f2 40 06 00 	mov.b	#6,	&0x0058	;#0x0006
    82f2:	58 00 
    82f4:	03 43       	nop			
    82f6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    82fa:	82 4f 00 02 	mov	r15,	&0x0200	
    82fe:	21 53       	incd	r1		
    8300:	34 41       	pop	r4		
    8302:	30 41       	ret			

00008304 <set_mcu_speed_dco_mclk_1MHz_smclk_1MHz>:
    8304:	04 12       	push	r4		
    8306:	04 41       	mov	r1,	r4	
    8308:	24 53       	incd	r4		
    830a:	5e 43       	mov.b	#1,	r14	;r3 As==01
    830c:	5f 43       	mov.b	#1,	r15	;r3 As==01
    830e:	b0 12 44 82 	call	#0x8244	
    8312:	34 41       	pop	r4		
    8314:	30 41       	ret			

00008316 <set_mcu_speed_dco_mclk_8MHz_smclk_8MHz>:
    8316:	04 12       	push	r4		
    8318:	04 41       	mov	r1,	r4	
    831a:	24 53       	incd	r4		
    831c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    831e:	7f 42       	mov.b	#8,	r15	;r2 As==11
    8320:	b0 12 44 82 	call	#0x8244	
    8324:	34 41       	pop	r4		
    8326:	30 41       	ret			

00008328 <set_mcu_speed_dco_mclk_8MHz_smclk_4MHz>:
    8328:	04 12       	push	r4		
    832a:	04 41       	mov	r1,	r4	
    832c:	24 53       	incd	r4		
    832e:	6e 43       	mov.b	#2,	r14	;r3 As==10
    8330:	7f 42       	mov.b	#8,	r15	;r2 As==11
    8332:	b0 12 44 82 	call	#0x8244	
    8336:	34 41       	pop	r4		
    8338:	30 41       	ret			

0000833a <set_mcu_speed_dco_mclk_8MHz_smclk_2MHz>:
    833a:	04 12       	push	r4		
    833c:	04 41       	mov	r1,	r4	
    833e:	24 53       	incd	r4		
    8340:	6e 42       	mov.b	#4,	r14	;r2 As==10
    8342:	7f 42       	mov.b	#8,	r15	;r2 As==11
    8344:	b0 12 44 82 	call	#0x8244	
    8348:	34 41       	pop	r4		
    834a:	30 41       	ret			

0000834c <set_mcu_speed_dco_mclk_8MHz_smclk_1MHz>:
    834c:	04 12       	push	r4		
    834e:	04 41       	mov	r1,	r4	
    8350:	24 53       	incd	r4		
    8352:	7e 42       	mov.b	#8,	r14	;r2 As==11
    8354:	7f 42       	mov.b	#8,	r15	;r2 As==11
    8356:	b0 12 44 82 	call	#0x8244	
    835a:	34 41       	pop	r4		
    835c:	30 41       	ret			

0000835e <set_mcu_speed_dco_mclk_12MHz_smclk_12MHz>:
    835e:	04 12       	push	r4		
    8360:	04 41       	mov	r1,	r4	
    8362:	24 53       	incd	r4		
    8364:	5e 43       	mov.b	#1,	r14	;r3 As==01
    8366:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    836a:	b0 12 44 82 	call	#0x8244	
    836e:	34 41       	pop	r4		
    8370:	30 41       	ret			

00008372 <set_mcu_speed_dco_mclk_12MHz_smclk_6MHz>:
    8372:	04 12       	push	r4		
    8374:	04 41       	mov	r1,	r4	
    8376:	24 53       	incd	r4		
    8378:	6e 43       	mov.b	#2,	r14	;r3 As==10
    837a:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    837e:	b0 12 44 82 	call	#0x8244	
    8382:	34 41       	pop	r4		
    8384:	30 41       	ret			

00008386 <set_mcu_speed_dco_mclk_12MHz_smclk_3MHz>:
    8386:	04 12       	push	r4		
    8388:	04 41       	mov	r1,	r4	
    838a:	24 53       	incd	r4		
    838c:	6e 42       	mov.b	#4,	r14	;r2 As==10
    838e:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    8392:	b0 12 44 82 	call	#0x8244	
    8396:	34 41       	pop	r4		
    8398:	30 41       	ret			

0000839a <set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz>:
    839a:	04 12       	push	r4		
    839c:	04 41       	mov	r1,	r4	
    839e:	24 53       	incd	r4		
    83a0:	7e 42       	mov.b	#8,	r14	;r2 As==11
    83a2:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    83a6:	b0 12 44 82 	call	#0x8244	
    83aa:	34 41       	pop	r4		
    83ac:	30 41       	ret			

000083ae <set_mcu_speed_dco_mclk_16MHz_smclk_16MHz>:
    83ae:	04 12       	push	r4		
    83b0:	04 41       	mov	r1,	r4	
    83b2:	24 53       	incd	r4		
    83b4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    83b6:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    83ba:	b0 12 44 82 	call	#0x8244	
    83be:	34 41       	pop	r4		
    83c0:	30 41       	ret			

000083c2 <set_mcu_speed_dco_mclk_16MHz_smclk_8MHz>:
    83c2:	04 12       	push	r4		
    83c4:	04 41       	mov	r1,	r4	
    83c6:	24 53       	incd	r4		
    83c8:	6e 43       	mov.b	#2,	r14	;r3 As==10
    83ca:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    83ce:	b0 12 44 82 	call	#0x8244	
    83d2:	34 41       	pop	r4		
    83d4:	30 41       	ret			

000083d6 <set_mcu_speed_dco_mclk_16MHz_smclk_4MHz>:
    83d6:	04 12       	push	r4		
    83d8:	04 41       	mov	r1,	r4	
    83da:	24 53       	incd	r4		
    83dc:	6e 42       	mov.b	#4,	r14	;r2 As==10
    83de:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    83e2:	b0 12 44 82 	call	#0x8244	
    83e6:	34 41       	pop	r4		
    83e8:	30 41       	ret			

000083ea <set_mcu_speed_dco_mclk_16MHz_smclk_2MHz>:
    83ea:	04 12       	push	r4		
    83ec:	04 41       	mov	r1,	r4	
    83ee:	24 53       	incd	r4		
    83f0:	7e 42       	mov.b	#8,	r14	;r2 As==11
    83f2:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    83f6:	b0 12 44 82 	call	#0x8244	
    83fa:	34 41       	pop	r4		
    83fc:	30 41       	ret			

000083fe <loop_4_cycles>:
    83fe:	04 12       	push	r4		
    8400:	04 41       	mov	r1,	r4	
    8402:	24 53       	incd	r4		
    8404:	3e 53       	add	#-1,	r14	;r3 As==11
    8406:	3f 63       	addc	#-1,	r15	;r3 As==11
    8408:	fd 2f       	jc	$-4      	;abs 0x8404
    840a:	34 41       	pop	r4		
    840c:	30 41       	ret			

0000840e <delay_usec>:
    840e:	04 12       	push	r4		
    8410:	04 41       	mov	r1,	r4	
    8412:	24 53       	incd	r4		
    8414:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8418:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    841c:	1f 42 00 02 	mov	&0x0200,r15	
    8420:	3f 92       	cmp	#8,	r15	;r2 As==11
    8422:	18 24       	jz	$+50     	;abs 0x8454
    8424:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    8428:	03 2c       	jc	$+8      	;abs 0x8430
    842a:	1f 93       	cmp	#1,	r15	;r3 As==01
    842c:	08 24       	jz	$+18     	;abs 0x843e
    842e:	2d 3c       	jmp	$+92     	;abs 0x848a
    8430:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    8434:	17 24       	jz	$+48     	;abs 0x8464
    8436:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    843a:	1e 24       	jz	$+62     	;abs 0x8478
    843c:	26 3c       	jmp	$+78     	;abs 0x848a
    843e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8442:	12 c3       	clrc			
    8444:	0f 10       	rrc	r15		
    8446:	12 c3       	clrc			
    8448:	0f 10       	rrc	r15		
    844a:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    844e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8452:	26 3c       	jmp	$+78     	;abs 0x84a0
    8454:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8458:	0f 5f       	rla	r15		
    845a:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    845e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8462:	1e 3c       	jmp	$+62     	;abs 0x84a0
    8464:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    8468:	0f 4e       	mov	r14,	r15	
    846a:	0f 5f       	rla	r15		
    846c:	0f 5e       	add	r14,	r15	
    846e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8472:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8476:	14 3c       	jmp	$+42     	;abs 0x84a0
    8478:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    847c:	0f 5f       	rla	r15		
    847e:	0f 5f       	rla	r15		
    8480:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8484:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8488:	0b 3c       	jmp	$+24     	;abs 0x84a0
    848a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    848e:	12 c3       	clrc			
    8490:	0f 10       	rrc	r15		
    8492:	12 c3       	clrc			
    8494:	0f 10       	rrc	r15		
    8496:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    849a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    849e:	03 43       	nop			
    84a0:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    84a4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    84a8:	b0 12 fe 83 	call	#0x83fe	
    84ac:	31 50 06 00 	add	#6,	r1	;#0x0006
    84b0:	34 41       	pop	r4		
    84b2:	30 41       	ret			

000084b4 <delay_ms>:
    84b4:	04 12       	push	r4		
    84b6:	04 41       	mov	r1,	r4	
    84b8:	24 53       	incd	r4		
    84ba:	31 82       	sub	#8,	r1	;r2 As==11
    84bc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    84c0:	1f 42 00 02 	mov	&0x0200,r15	
    84c4:	3f 92       	cmp	#8,	r15	;r2 As==11
    84c6:	13 24       	jz	$+40     	;abs 0x84ee
    84c8:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    84cc:	03 2c       	jc	$+8      	;abs 0x84d4
    84ce:	1f 93       	cmp	#1,	r15	;r3 As==01
    84d0:	08 24       	jz	$+18     	;abs 0x84e2
    84d2:	1f 3c       	jmp	$+64     	;abs 0x8512
    84d4:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    84d8:	10 24       	jz	$+34     	;abs 0x84fa
    84da:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    84de:	13 24       	jz	$+40     	;abs 0x8506
    84e0:	18 3c       	jmp	$+50     	;abs 0x8512
    84e2:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    84e6:	f8 ff 
    84e8:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    84ec:	18 3c       	jmp	$+50     	;abs 0x851e
    84ee:	b4 40 d0 07 	mov	#2000,	-8(r4)	;#0x07d0, 0xfff8(r4)
    84f2:	f8 ff 
    84f4:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    84f8:	12 3c       	jmp	$+38     	;abs 0x851e
    84fa:	b4 40 b8 0b 	mov	#3000,	-8(r4)	;#0x0bb8, 0xfff8(r4)
    84fe:	f8 ff 
    8500:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8504:	0c 3c       	jmp	$+26     	;abs 0x851e
    8506:	b4 40 a0 0f 	mov	#4000,	-8(r4)	;#0x0fa0, 0xfff8(r4)
    850a:	f8 ff 
    850c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8510:	06 3c       	jmp	$+14     	;abs 0x851e
    8512:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    8516:	f8 ff 
    8518:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    851c:	03 43       	nop			
    851e:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8522:	08 3c       	jmp	$+18     	;abs 0x8534
    8524:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    8528:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    852c:	b0 12 fe 83 	call	#0x83fe	
    8530:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    8534:	94 94 fc ff 	cmp	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    8538:	f6 ff 
    853a:	f4 2b       	jnc	$-22     	;abs 0x8524
    853c:	31 52       	add	#8,	r1	;r2 As==11
    853e:	34 41       	pop	r4		
    8540:	30 41       	ret			

00008542 <led_green_off>:
    8542:	04 12       	push	r4		
    8544:	04 41       	mov	r1,	r4	
    8546:	24 53       	incd	r4		
    8548:	5f 42 21 00 	mov.b	&0x0021,r15	
    854c:	7f f0 fd ff 	and.b	#-3,	r15	;#0xfffd
    8550:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    8554:	34 41       	pop	r4		
    8556:	30 41       	ret			

00008558 <led_green_on>:
    8558:	04 12       	push	r4		
    855a:	04 41       	mov	r1,	r4	
    855c:	24 53       	incd	r4		
    855e:	5f 42 21 00 	mov.b	&0x0021,r15	
    8562:	6f d3       	bis.b	#2,	r15	;r3 As==10
    8564:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    8568:	34 41       	pop	r4		
    856a:	30 41       	ret			

0000856c <led_green_switch>:
    856c:	04 12       	push	r4		
    856e:	04 41       	mov	r1,	r4	
    8570:	24 53       	incd	r4		
    8572:	5f 42 21 00 	mov.b	&0x0021,r15	
    8576:	6f e3       	xor.b	#2,	r15	;r3 As==10
    8578:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    857c:	34 41       	pop	r4		
    857e:	30 41       	ret			

00008580 <led_red_off>:
    8580:	04 12       	push	r4		
    8582:	04 41       	mov	r1,	r4	
    8584:	24 53       	incd	r4		
    8586:	5f 42 21 00 	mov.b	&0x0021,r15	
    858a:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    858e:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    8592:	34 41       	pop	r4		
    8594:	30 41       	ret			

00008596 <led_red_on>:
    8596:	04 12       	push	r4		
    8598:	04 41       	mov	r1,	r4	
    859a:	24 53       	incd	r4		
    859c:	5f 42 21 00 	mov.b	&0x0021,r15	
    85a0:	5f d3       	bis.b	#1,	r15	;r3 As==01
    85a2:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    85a6:	34 41       	pop	r4		
    85a8:	30 41       	ret			

000085aa <led_red_switch>:
    85aa:	04 12       	push	r4		
    85ac:	04 41       	mov	r1,	r4	
    85ae:	24 53       	incd	r4		
    85b0:	5f 42 21 00 	mov.b	&0x0021,r15	
    85b4:	5f e3       	xor.b	#1,	r15	;r3 As==01
    85b6:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    85ba:	34 41       	pop	r4		
    85bc:	30 41       	ret			

000085be <leds_off>:
    85be:	04 12       	push	r4		
    85c0:	04 41       	mov	r1,	r4	
    85c2:	24 53       	incd	r4		
    85c4:	5f 42 21 00 	mov.b	&0x0021,r15	
    85c8:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    85cc:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    85d0:	34 41       	pop	r4		
    85d2:	30 41       	ret			

000085d4 <leds_on>:
    85d4:	04 12       	push	r4		
    85d6:	04 41       	mov	r1,	r4	
    85d8:	24 53       	incd	r4		
    85da:	5f 42 21 00 	mov.b	&0x0021,r15	
    85de:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    85e2:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    85e6:	34 41       	pop	r4		
    85e8:	30 41       	ret			

000085ea <leds_init>:
    85ea:	04 12       	push	r4		
    85ec:	04 41       	mov	r1,	r4	
    85ee:	24 53       	incd	r4		
    85f0:	5f 42 21 00 	mov.b	&0x0021,r15	
    85f4:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    85f8:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    85fc:	5f 42 22 00 	mov.b	&0x0022,r15	
    8600:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    8604:	c2 4f 22 00 	mov.b	r15,	&0x0022	
    8608:	5f 42 26 00 	mov.b	&0x0026,r15	
    860c:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    8610:	c2 4f 26 00 	mov.b	r15,	&0x0026	
    8614:	b0 12 be 85 	call	#0x85be	
    8618:	34 41       	pop	r4		
    861a:	30 41       	ret			

0000861c <uart_init>:
    861c:	04 12       	push	r4		
    861e:	04 41       	mov	r1,	r4	
    8620:	24 53       	incd	r4		
    8622:	21 83       	decd	r1		
    8624:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8628:	5f 42 1b 00 	mov.b	&0x001b,r15	
    862c:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    8630:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    8634:	5f 42 1a 00 	mov.b	&0x001a,r15	
    8638:	7f d0 10 00 	bis.b	#16,	r15	;#0x0010
    863c:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    8640:	5f 42 1a 00 	mov.b	&0x001a,r15	
    8644:	7f f0 df ff 	and.b	#-33,	r15	;#0xffdf
    8648:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    864c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8650:	1f 93       	cmp	#1,	r15	;r3 As==01
    8652:	03 24       	jz	$+8      	;abs 0x865a
    8654:	3f 92       	cmp	#8,	r15	;r2 As==11
    8656:	12 24       	jz	$+38     	;abs 0x867c
    8658:	23 3c       	jmp	$+72     	;abs 0x86a0
    865a:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    865e:	61 00 
    8660:	f2 40 68 00 	mov.b	#104,	&0x0062	;#0x0068
    8664:	62 00 
    8666:	c2 43 63 00 	mov.b	#0,	&0x0063	;r3 As==00
    866a:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    866e:	5f 42 61 00 	mov.b	&0x0061,r15	
    8672:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    8676:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    867a:	13 3c       	jmp	$+40     	;abs 0x86a2
    867c:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    8680:	61 00 
    8682:	f2 40 41 00 	mov.b	#65,	&0x0062	;#0x0041
    8686:	62 00 
    8688:	f2 40 03 00 	mov.b	#3,	&0x0063	;#0x0003
    868c:	63 00 
    868e:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    8692:	5f 42 61 00 	mov.b	&0x0061,r15	
    8696:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    869a:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    869e:	01 3c       	jmp	$+4      	;abs 0x86a2
    86a0:	03 43       	nop			
    86a2:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
    86a6:	21 53       	incd	r1		
    86a8:	34 41       	pop	r4		
    86aa:	30 41       	ret			

000086ac <uart_stop>:
    86ac:	04 12       	push	r4		
    86ae:	04 41       	mov	r1,	r4	
    86b0:	24 53       	incd	r4		
    86b2:	34 41       	pop	r4		
    86b4:	30 41       	ret			

000086b6 <putchar>:
    86b6:	04 12       	push	r4		
    86b8:	04 41       	mov	r1,	r4	
    86ba:	24 53       	incd	r4		
    86bc:	21 83       	decd	r1		
    86be:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    86c2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86c6:	4f 4f       	mov.b	r15,	r15	
    86c8:	c2 4f 67 00 	mov.b	r15,	&0x0067	
    86cc:	03 43       	nop			
    86ce:	5f 42 03 00 	mov.b	&0x0003,r15	
    86d2:	4f 4f       	mov.b	r15,	r15	
    86d4:	2f f3       	and	#2,	r15	;r3 As==10
    86d6:	0f 93       	tst	r15		
    86d8:	fa 27       	jz	$-10     	;abs 0x86ce
    86da:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86de:	4f 4f       	mov.b	r15,	r15	
    86e0:	4f 4f       	mov.b	r15,	r15	
    86e2:	21 53       	incd	r1		
    86e4:	34 41       	pop	r4		
    86e6:	30 41       	ret			

000086e8 <uart_getchar>:
    86e8:	04 12       	push	r4		
    86ea:	04 41       	mov	r1,	r4	
    86ec:	24 53       	incd	r4		
    86ee:	21 83       	decd	r1		
    86f0:	5f 42 66 00 	mov.b	&0x0066,r15	
    86f4:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    86f8:	c4 43 fd ff 	mov.b	#0,	-3(r4)	;r3 As==00, 0xfffd(r4)
    86fc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8700:	21 53       	incd	r1		
    8702:	34 41       	pop	r4		
    8704:	30 41       	ret			

00008706 <uart_eint>:
    8706:	04 12       	push	r4		
    8708:	04 41       	mov	r1,	r4	
    870a:	24 53       	incd	r4		
    870c:	5f 42 01 00 	mov.b	&0x0001,r15	
    8710:	5f d3       	bis.b	#1,	r15	;r3 As==01
    8712:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    8716:	34 41       	pop	r4		
    8718:	30 41       	ret			

0000871a <uart_dint>:
    871a:	04 12       	push	r4		
    871c:	04 41       	mov	r1,	r4	
    871e:	24 53       	incd	r4		
    8720:	5f 42 01 00 	mov.b	&0x0001,r15	
    8724:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    8728:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    872c:	34 41       	pop	r4		
    872e:	30 41       	ret			

00008730 <uart_register_cb>:
    8730:	04 12       	push	r4		
    8732:	04 41       	mov	r1,	r4	
    8734:	24 53       	incd	r4		
    8736:	21 83       	decd	r1		
    8738:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    873c:	92 44 fc ff 	mov	-4(r4),	&0x0202	;0xfffc(r4)
    8740:	02 02 
    8742:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    8746:	03 20       	jnz	$+8      	;abs 0x874e
    8748:	b0 12 1a 87 	call	#0x871a	
    874c:	02 3c       	jmp	$+6      	;abs 0x8752
    874e:	b0 12 06 87 	call	#0x8706	
    8752:	21 53       	incd	r1		
    8754:	34 41       	pop	r4		
    8756:	30 41       	ret			

00008758 <usart0irq>:
    8758:	0f 12       	push	r15		
    875a:	0e 12       	push	r14		
    875c:	0d 12       	push	r13		
    875e:	0c 12       	push	r12		
    8760:	04 12       	push	r4		
    8762:	04 41       	mov	r1,	r4	
    8764:	34 50 0a 00 	add	#10,	r4	;#0x000a
    8768:	21 83       	decd	r1		
    876a:	5f 42 65 00 	mov.b	&0x0065,r15	
    876e:	4f 4f       	mov.b	r15,	r15	
    8770:	2f f2       	and	#4,	r15	;r2 As==10
    8772:	0f 93       	tst	r15		
    8774:	0a 24       	jz	$+22     	;abs 0x878a
    8776:	5f 42 66 00 	mov.b	&0x0066,r15	
    877a:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    877e:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8782:	5f 53       	inc.b	r15		
    8784:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    8788:	0a 3c       	jmp	$+22     	;abs 0x879e
    878a:	1e 42 02 02 	mov	&0x0202,r14	
    878e:	5f 42 66 00 	mov.b	&0x0066,r15	
    8792:	8e 12       	call	r14		
    8794:	0f 93       	tst	r15		
    8796:	03 24       	jz	$+8      	;abs 0x879e
    8798:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    879c:	00 00 
    879e:	21 53       	incd	r1		
    87a0:	34 41       	pop	r4		
    87a2:	3c 41       	pop	r12		
    87a4:	3d 41       	pop	r13		
    87a6:	3e 41       	pop	r14		
    87a8:	3f 41       	pop	r15		
    87aa:	00 13       	reti			

000087ac <watchdog_stop>:
    87ac:	04 12       	push	r4		
    87ae:	04 41       	mov	r1,	r4	
    87b0:	24 53       	incd	r4		
    87b2:	1f 42 20 01 	mov	&0x0120,r15	
    87b6:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    87ba:	82 4f 04 02 	mov	r15,	&0x0204	
    87be:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    87c2:	20 01 
    87c4:	34 41       	pop	r4		
    87c6:	30 41       	ret			

000087c8 <watchdog_restore>:
    87c8:	04 12       	push	r4		
    87ca:	04 41       	mov	r1,	r4	
    87cc:	24 53       	incd	r4		
    87ce:	1f 42 04 02 	mov	&0x0204,r15	
    87d2:	3f d0 00 5a 	bis	#23040,	r15	;#0x5a00
    87d6:	82 4f 20 01 	mov	r15,	&0x0120	
    87da:	34 41       	pop	r4		
    87dc:	30 41       	ret			

000087de <strcmp>:
    87de:	03 3c       	jmp	$+8      	;abs 0x87e6
    87e0:	1f 53       	inc	r15		
    87e2:	4d 93       	tst.b	r13		
    87e4:	09 24       	jz	$+20     	;abs 0x87f8
    87e6:	6d 4f       	mov.b	@r15,	r13	
    87e8:	7c 4e       	mov.b	@r14+,	r12	
    87ea:	4d 9c       	cmp.b	r12,	r13	
    87ec:	f9 27       	jz	$-12     	;abs 0x87e0
    87ee:	4f 4d       	mov.b	r13,	r15	
    87f0:	5e 4e ff ff 	mov.b	-1(r14),r14	;0xffff(r14)
    87f4:	0f 8e       	sub	r14,	r15	
    87f6:	30 41       	ret			
    87f8:	0f 43       	clr	r15		
    87fa:	30 41       	ret			

000087fc <puts>:
    87fc:	0b 12       	push	r11		
    87fe:	0b 4f       	mov	r15,	r11	
    8800:	6f 4b       	mov.b	@r11,	r15	
    8802:	4f 93       	tst.b	r15		
    8804:	06 24       	jz	$+14     	;abs 0x8812
    8806:	1b 53       	inc	r11		
    8808:	8f 11       	sxt	r15		
    880a:	b0 12 b6 86 	call	#0x86b6	
    880e:	0f 93       	tst	r15		
    8810:	f7 37       	jge	$-16     	;abs 0x8800
    8812:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    8816:	05 20       	jnz	$+12     	;abs 0x8822
    8818:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    881c:	b0 12 b6 86 	call	#0x86b6	
    8820:	01 3c       	jmp	$+4      	;abs 0x8824
    8822:	3f 43       	mov	#-1,	r15	;r3 As==11
    8824:	3b 41       	pop	r11		
    8826:	30 41       	ret			

00008828 <_unexpected_>:
    8828:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	18 81 18 81 18 81 18 81 18 81 18 81 18 81 58 87     ..............X.
    fff0:	18 81 18 81 18 81 18 81 18 81 18 81 18 81 00 80     ................
